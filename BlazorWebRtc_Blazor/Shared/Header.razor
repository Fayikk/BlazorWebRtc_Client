@using BlazorWebRtc_Blazor.Models.Request
@using BlazorWebRtc_Blazor.Services.Abstract
@inject IAccountService accountService
@inject NavigationManager navigationManager
@inject IRequestService requestService
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }
    header {
        background-color: #007bff;
        padding: 1rem;
        text-align: center;
    }

    nav ul {
        list-style: none;
        display: flex;
        justify-content: center;
        gap: 1.5rem;
    }

        nav ul li a {
            color: white;
            text-decoration: none;
            font-size: 1.2rem;
        }


</style>



   <header>
        <nav>
            <ul>
                <li><a href="#">Home</a></li>
               
                <li><a @onclick="OpenModal">Notifications(@requestCount) </a></li>

                <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                    <Authorized>
                    <li><a href="/friends">Friends</a></li>

                    <li><a href="#"> @context.User.Identity.Name </a></li>
                    <li><a  @onclick="Logout" >Logout</a></li>
                    </Authorized>
                    <NotAuthorized>
                    <li><a href="Login">Login</a></li>
                    <li><a href="Register">Register</a></li>

</NotAuthorized>
                </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

            </ul>
        </nav>
    </header>



<BaseModal IsOpen="@IsModalOpen" IsOpenChanged="@((value) => IsModalOpen = value)" Requests="@getRequests" RefreshRequestList="@OnInitializedAsync" />
@code {
    private int requestCount;
    public bool IsModalOpen = false;
    private List<GetRequestFriendshipList> getRequests = new List<GetRequestFriendshipList>();
    private async Task Logout()
    {
        await accountService.Logout();
        navigationManager.NavigateTo("/");
    }

    private async Task OpenModal()
    {
        getRequests = await requestService.GetFriendshipRequest();
        IsModalOpen = true;
    }


    protected override async Task OnInitializedAsync()
    {
        var result = await requestService.GetFriendshipRequest();
        requestCount = result.Count;
    }

}
